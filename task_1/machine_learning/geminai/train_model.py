import os, time, json, random
from dotenv import load_dotenv
import google.generativeai as genai
import pandas as pd
from sklearn.metrics import classification_report, confusion_matrix

load_dotenv()
genai.configure(api_key=os.environ["GOOGLE_API_KEY"])

MODEL = "gemini-1.5-flash"  # 필요 시 "gemini-1.5-pro"

# 출력 스키마(엄격한 JSON)
from google.generativeai.types import Schema, Type
response_schema = Schema(
    type=Type.OBJECT,
    properties={
        "label": Schema(type=Type.STRING, enum=["Human", "Machine"]),
        "confidence": Schema(type=Type.NUMBER),   # 0~1 추정치(모델 자체 판단)
        "rationale": Schema(type=Type.STRING),    # 선택 근거(옵션)
    },
    required=["label"]
)

SYSTEM_INSTRUCTION = """You are a strict binary classifier for research notes.
Task: Decide whether the given text block was written by a Human or generated by a Machine (LLM).
Rules:
- Output JSON ONLY (no extra text).
- Consider style features: redundancy patterns, meta/instructional phrasing, boundary-condition handling,
  symbol misuse, and mismatch between equations and prose.
- Be conservative: if the text is highly templated with generic meta phrases and minor technical gaps,
  prefer 'Machine'. If it contains specific research intent, experiment context, or carefully handled edge cases,
  prefer 'Human'.
"""

# 선택: Few-shot 예시(짧게 2~4개). 네 데이터 일부를 hand-label 해서 넣으면 성능↑
FEW_SHOTS = [
  {
    "text": "Initialize... Condition 1 and Condition 2 are user-defined... "
            "The approach maintains the original principle while improving performance...",
    "label": "Machine"
  },
  {
    "text": "Stopping criteria: for k=0, initialize x(-1)=x(0); we then set v(0)=0... "
            "We used SciBERT and GroupKFold to avoid leakage.",
    "label": "Human"
  }
]

def build_prompt(text):
    shots = "\n\n".join([
        f"Example:\nTEXT:\n{ex['text']}\nLABEL:{ex['label']}"
        for ex in FEW_SHOTS
    ])
    return f"""{shots}

Now classify the following TEXT.
TEXT:
{text}
Return only JSON with keys: label, confidence, rationale.
"""

model = genai.GenerativeModel(
    MODEL,
    system_instruction=SYSTEM_INSTRUCTION,
    generation_config=genai.GenerationConfig(
        temperature=0.0,
        top_p=0.1,
        response_mime_type="application/json",
        response_schema=response_schema,
        candidate_count=1,
    ),
)

def classify_text(text, retries=3):
    for attempt in range(retries):
        try:
            resp = model.generate_content(build_prompt(text))
            data = json.loads(resp.text) if isinstance(resp.text, str) else resp
            return data["label"], float(data.get("confidence", 0.0)), data.get("rationale", "")
        except Exception as e:
            time.sleep(1.5 * (attempt + 1))
    return "Machine", 0.0, "fallback"   # 안전 기본값

